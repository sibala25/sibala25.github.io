{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "63b11a39",
   "metadata": {},
   "source": [
    "# Discussion 4B Group 5 Final Project\n",
    "Aashna Sibal, Emily Olds, and Sung Been Lee"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "906a2d39",
   "metadata": {},
   "source": [
    "# Group Contributions Statement\n",
    "\n",
    "All three of us wrote the data import and cleaning portion and worked on creating Tables 1 and 2 and Figure 4. Emily led Figure 1 and the random forests model. Sung Been led Figure 2 and the support vector machines model. Aashna led Figure 3 and the multinomial logistic regression model. We all worked on the comments and discussions for our respective sections and evenly split the rest of the explanations, writing, and markdown cells. We all reviewed each other’s work and made revisions where necessary."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09e42c1a",
   "metadata": {},
   "source": [
    "Machine learning is a powerful field, made up of tools and methods that allow us to learn from past data and then use it to make complex predictions about other data. \n",
    "\n",
    "**Overview**:In this project, we will be demonstrating how to use some of these machine learning techniques. Using python, we will analyze a \"penguins\" dataset that has information about penguins such as their species, sex, location, and their physical characteristics. First, we will clean and explore the data through analysis and plotting. Utilizing feature selection techniques, we will then decide on two quantitative variables and one qualitative variable from the dataset that are the best predictor of a penguins' species. We will use these three variables to build three different machine learning models that predict a penguins' species and reflect on their strengths, weaknesses, and overall performance."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bead8041",
   "metadata": {},
   "source": [
    "# Data Import and Cleaning"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd66416a",
   "metadata": {},
   "source": [
    "Before we can move on to actually exploring our data, we will need to import the dataset, split it, and clean it. Since we will be using a pandas dataframe, we are going to import pandas and numpy. Then, we will upload the data from the URL and assign it to a pandas dataframe called penguins. Finally, we will split the dataset into two: train and test. Train is the data we will use to train our model, and test is what we will assess the model's performance on."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6dc526ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "# importing relevant packages to save data in a data frame and to train-test split\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# importing the data from url\n",
    "url = \"https://www.philchodrow.com/PIC16A/content/IO_and_modules/IO/palmer_penguins.csv\"\n",
    "penguins = pd.read_csv(url)\n",
    "\n",
    "# set seed to get reproducibility\n",
    "np.random.seed(1234)\n",
    "\n",
    "# train-test split\n",
    "train, test = train_test_split(penguins, test_size = .3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "effd392e",
   "metadata": {},
   "source": [
    "### Cleaning Data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f58b9ee",
   "metadata": {},
   "source": [
    "Now that our data is split, we can go ahead and clean it. This includes only keeping rows we want to use, removing rows with NaN values and shortening the full scientific species name to just the first word for simplicity. We also will remove a row where the penguins sex is incorrectly marked as \".\". To build a model, we also need all of our data to be encoded as integers. Therefore, we will change qualitative columns like sex, island, and species to integers beginning at 0, with each integer representing a different form of that category. For example, for sex, male and female would be encoded as 0s and 1s. Since we will have to clean both the train and test data, we are going to create a function that we can then call for each dataset. If split is true in the function, we will separate the data into two dataframes depending which dataset is input (X_test or X_train and y_test or y_train). X will be all the predictor variables, every row we want to keep except species. And y will be the target data, with just species, since we want to predict that in the end. \n",
    "\n",
    "For our exploratory analysis, we also just want one dataset with all the train data cleaned. If split is false, this will happen and we will get a new dataset called clean_train, with the clean train data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "53c6a59b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# importing preprocessing from sklearn to encode qualitative variables as quantitative\n",
    "from sklearn import preprocessing\n",
    "\n",
    "def clean_data(data_df, split = True):\n",
    "    '''\n",
    "    clean_data takes in a data frame and cleans it by making a copy of it, specifying the columns of interest,\n",
    "    removing rows with NaN values, shortening the species name, changing qualitative variables to \n",
    "    quantitative, and either separating the data into two data frames: one with target data and one with \n",
    "    predictor data and returning these two data frames, or returning the cleaned, unseparated data frame as\n",
    "    specified by the split argument.\n",
    "    parameter data_df : a data frame to clean\n",
    "    split : boolean value to specify whether the function should return two data frames (predictor, target) or \n",
    "    a single data frame. Defaults to True.\n",
    "    '''\n",
    "    #dataframes are mutable, so the function begins by making a copy before cleaning\n",
    "    df = data_df.copy()\n",
    "    \n",
    "    #here the function specifies which columns are of interest in our analysis.\n",
    "    #we are not interested in the \"comments\" column, so it is not included in the dataframe.\n",
    "    df = df[['Species',\n",
    "             'Island',\n",
    "             'Culmen Length (mm)',\n",
    "             'Culmen Depth (mm)',\n",
    "             'Flipper Length (mm)',\n",
    "             'Body Mass (g)',\n",
    "             'Sex',\n",
    "             'Delta 15 N (o/oo)',\n",
    "             'Delta 13 C (o/oo)']]\n",
    "    \n",
    "    #the function then drops rows with NaN values.\n",
    "    #axis = 0 because the function should drop rows, not columns.\n",
    "    df = df.dropna(axis = 0)\n",
    "    \n",
    "    #one of the sex entries had a \".\" by mistake, so here that row is dropped from the data frame.\n",
    "    df = df[df['Sex']!='.']\n",
    "    \n",
    "    #the code below shortens the species names by only using the first word of the species.\n",
    "    df['Species'] = df['Species'].str.split().str.get(0)\n",
    "    \n",
    "    #when split is true, we want to return X with predictor data, and y with the target data\n",
    "    if split:\n",
    "        #setting up the LabelEncoder function to transform qualitiative variables to quantitative.\n",
    "        le = preprocessing.LabelEncoder()\n",
    "\n",
    "        #transforming \"Sex\", \"Island\", and \"Species\", the three qualitative variables, to quantitative variables.\n",
    "        df['Sex'] = le.fit_transform(df['Sex'])\n",
    "        df['Species'] = le.fit_transform(df['Species'])\n",
    "        df['Island'] = le.fit_transform(df['Island'])\n",
    "        #splitting the dataframe into two: one with predictor data (X) and one with target data (y).\n",
    "        X = df.drop(columns = ['Species'])\n",
    "        y = df['Species'] #species is target data since it's what we want to predict\n",
    "        return (X, y)\n",
    "    else: #when split is not true \n",
    "        return df #clean the whole data frame and leave it as one, with all the columns we are interested in"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9be7f170",
   "metadata": {},
   "outputs": [],
   "source": [
    "#using the function to clean the train and test sets\n",
    "X_train, y_train = clean_data(train)\n",
    "X_test, y_test = clean_data(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b4720840",
   "metadata": {},
   "outputs": [],
   "source": [
    "#creating a new dataframe with all the cleaned data and all columns specified in clean_data\n",
    "#by making split false\n",
    "clean_train = clean_data(train, split = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d240de69",
   "metadata": {},
   "source": [
    "# Exploratory Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe162a9e",
   "metadata": {},
   "source": [
    "For the purpose of this project, we will be selecting three variables to use to construct our model–two of which are quantitative and one of which is qualitative. Before we use automated feature selection to decide which variables are the best to make the most accurate model, we will explore the data through graphs. From the last step, we saw that the variables we could potentially use are:\n",
    "\n",
    "`['Island', 'Culmen Length (mm)', 'Culmen Depth (mm)', 'Flipper Length (mm)', 'Body Mass (g)', 'Sex', 'Delta 15 N (o/oo)', 'Delta 13 C (o/oo)']`\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d8290b4",
   "metadata": {},
   "source": [
    "## Table 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c3ba4e9",
   "metadata": {},
   "source": [
    "First, we will make a summary table of `clean_train` that shows the count, mean, standard deviation, minimum and maximum, and 25th, 50th, and 75th percentile of each column (or variable) of the data frame listed above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9f6aeb54",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Culmen Length (mm)</th>\n",
       "      <th>Culmen Depth (mm)</th>\n",
       "      <th>Flipper Length (mm)</th>\n",
       "      <th>Body Mass (g)</th>\n",
       "      <th>Delta 15 N (o/oo)</th>\n",
       "      <th>Delta 13 C (o/oo)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>225.000000</td>\n",
       "      <td>225.000000</td>\n",
       "      <td>225.000000</td>\n",
       "      <td>225.000000</td>\n",
       "      <td>225.000000</td>\n",
       "      <td>225.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>44.236889</td>\n",
       "      <td>17.082667</td>\n",
       "      <td>201.560000</td>\n",
       "      <td>4220.000000</td>\n",
       "      <td>8.726639</td>\n",
       "      <td>-25.691214</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>5.342102</td>\n",
       "      <td>2.021075</td>\n",
       "      <td>13.794318</td>\n",
       "      <td>811.424425</td>\n",
       "      <td>0.546875</td>\n",
       "      <td>0.769289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>32.100000</td>\n",
       "      <td>13.100000</td>\n",
       "      <td>172.000000</td>\n",
       "      <td>2700.000000</td>\n",
       "      <td>7.632200</td>\n",
       "      <td>-27.018540</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>39.600000</td>\n",
       "      <td>15.300000</td>\n",
       "      <td>190.000000</td>\n",
       "      <td>3550.000000</td>\n",
       "      <td>8.299300</td>\n",
       "      <td>-26.275730</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>45.100000</td>\n",
       "      <td>17.200000</td>\n",
       "      <td>198.000000</td>\n",
       "      <td>4050.000000</td>\n",
       "      <td>8.664960</td>\n",
       "      <td>-25.881560</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>48.700000</td>\n",
       "      <td>18.600000</td>\n",
       "      <td>214.000000</td>\n",
       "      <td>4800.000000</td>\n",
       "      <td>9.153080</td>\n",
       "      <td>-25.112230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>59.600000</td>\n",
       "      <td>21.500000</td>\n",
       "      <td>230.000000</td>\n",
       "      <td>6050.000000</td>\n",
       "      <td>10.025440</td>\n",
       "      <td>-23.890170</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Culmen Length (mm)  Culmen Depth (mm)  Flipper Length (mm)  \\\n",
       "count          225.000000         225.000000           225.000000   \n",
       "mean            44.236889          17.082667           201.560000   \n",
       "std              5.342102           2.021075            13.794318   \n",
       "min             32.100000          13.100000           172.000000   \n",
       "25%             39.600000          15.300000           190.000000   \n",
       "50%             45.100000          17.200000           198.000000   \n",
       "75%             48.700000          18.600000           214.000000   \n",
       "max             59.600000          21.500000           230.000000   \n",
       "\n",
       "       Body Mass (g)  Delta 15 N (o/oo)  Delta 13 C (o/oo)  \n",
       "count     225.000000         225.000000         225.000000  \n",
       "mean     4220.000000           8.726639         -25.691214  \n",
       "std       811.424425           0.546875           0.769289  \n",
       "min      2700.000000           7.632200         -27.018540  \n",
       "25%      3550.000000           8.299300         -26.275730  \n",
       "50%      4050.000000           8.664960         -25.881560  \n",
       "75%      4800.000000           9.153080         -25.112230  \n",
       "max      6050.000000          10.025440         -23.890170  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#creating summary table to help guide exploratory analysis\n",
    "clean_train.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "834e5046",
   "metadata": {},
   "source": [
    "## Table 2 "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efa1ab14",
   "metadata": {},
   "source": [
    "Next, we will make a display table that groups our data by species, island, and sex, and then displays the mean of every column for every species-island-sex pair rounded to two decimal places."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "72615058",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Culmen Length (mm)</th>\n",
       "      <th>Culmen Depth (mm)</th>\n",
       "      <th>Flipper Length (mm)</th>\n",
       "      <th>Body Mass (g)</th>\n",
       "      <th>Delta 15 N (o/oo)</th>\n",
       "      <th>Delta 13 C (o/oo)</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Species</th>\n",
       "      <th>Island</th>\n",
       "      <th>Sex</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"6\" valign=\"top\">Adelie</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">Biscoe</th>\n",
       "      <th>FEMALE</th>\n",
       "      <td>38.12</td>\n",
       "      <td>17.77</td>\n",
       "      <td>185.31</td>\n",
       "      <td>3394.23</td>\n",
       "      <td>8.76</td>\n",
       "      <td>-25.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MALE</th>\n",
       "      <td>40.47</td>\n",
       "      <td>19.17</td>\n",
       "      <td>190.85</td>\n",
       "      <td>4034.62</td>\n",
       "      <td>8.88</td>\n",
       "      <td>-25.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Dream</th>\n",
       "      <th>FEMALE</th>\n",
       "      <td>36.68</td>\n",
       "      <td>17.58</td>\n",
       "      <td>188.00</td>\n",
       "      <td>3353.95</td>\n",
       "      <td>8.93</td>\n",
       "      <td>-25.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MALE</th>\n",
       "      <td>40.17</td>\n",
       "      <td>19.02</td>\n",
       "      <td>191.38</td>\n",
       "      <td>3945.31</td>\n",
       "      <td>9.05</td>\n",
       "      <td>-25.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Torgersen</th>\n",
       "      <th>FEMALE</th>\n",
       "      <td>38.08</td>\n",
       "      <td>17.58</td>\n",
       "      <td>189.12</td>\n",
       "      <td>3348.44</td>\n",
       "      <td>8.77</td>\n",
       "      <td>-25.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MALE</th>\n",
       "      <td>40.67</td>\n",
       "      <td>19.41</td>\n",
       "      <td>196.75</td>\n",
       "      <td>4070.31</td>\n",
       "      <td>8.95</td>\n",
       "      <td>-25.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Chinstrap</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">Dream</th>\n",
       "      <th>FEMALE</th>\n",
       "      <td>46.45</td>\n",
       "      <td>17.53</td>\n",
       "      <td>191.96</td>\n",
       "      <td>3471.74</td>\n",
       "      <td>9.29</td>\n",
       "      <td>-24.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MALE</th>\n",
       "      <td>51.11</td>\n",
       "      <td>19.15</td>\n",
       "      <td>199.39</td>\n",
       "      <td>3938.04</td>\n",
       "      <td>9.39</td>\n",
       "      <td>-24.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Gentoo</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">Biscoe</th>\n",
       "      <th>FEMALE</th>\n",
       "      <td>45.63</td>\n",
       "      <td>14.26</td>\n",
       "      <td>213.20</td>\n",
       "      <td>4711.67</td>\n",
       "      <td>8.17</td>\n",
       "      <td>-26.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MALE</th>\n",
       "      <td>49.63</td>\n",
       "      <td>15.80</td>\n",
       "      <td>220.93</td>\n",
       "      <td>5485.98</td>\n",
       "      <td>8.27</td>\n",
       "      <td>-26.16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Culmen Length (mm)  Culmen Depth (mm)  \\\n",
       "Species   Island    Sex                                             \n",
       "Adelie    Biscoe    FEMALE               38.12              17.77   \n",
       "                    MALE                 40.47              19.17   \n",
       "          Dream     FEMALE               36.68              17.58   \n",
       "                    MALE                 40.17              19.02   \n",
       "          Torgersen FEMALE               38.08              17.58   \n",
       "                    MALE                 40.67              19.41   \n",
       "Chinstrap Dream     FEMALE               46.45              17.53   \n",
       "                    MALE                 51.11              19.15   \n",
       "Gentoo    Biscoe    FEMALE               45.63              14.26   \n",
       "                    MALE                 49.63              15.80   \n",
       "\n",
       "                            Flipper Length (mm)  Body Mass (g)  \\\n",
       "Species   Island    Sex                                          \n",
       "Adelie    Biscoe    FEMALE               185.31        3394.23   \n",
       "                    MALE                 190.85        4034.62   \n",
       "          Dream     FEMALE               188.00        3353.95   \n",
       "                    MALE                 191.38        3945.31   \n",
       "          Torgersen FEMALE               189.12        3348.44   \n",
       "                    MALE                 196.75        4070.31   \n",
       "Chinstrap Dream     FEMALE               191.96        3471.74   \n",
       "                    MALE                 199.39        3938.04   \n",
       "Gentoo    Biscoe    FEMALE               213.20        4711.67   \n",
       "                    MALE                 220.93        5485.98   \n",
       "\n",
       "                            Delta 15 N (o/oo)  Delta 13 C (o/oo)  \n",
       "Species   Island    Sex                                           \n",
       "Adelie    Biscoe    FEMALE               8.76             -25.88  \n",
       "                    MALE                 8.88             -25.96  \n",
       "          Dream     FEMALE               8.93             -25.83  \n",
       "                    MALE                 9.05             -25.70  \n",
       "          Torgersen FEMALE               8.77             -25.71  \n",
       "                    MALE                 8.95             -25.84  \n",
       "Chinstrap Dream     FEMALE               9.29             -24.61  \n",
       "                    MALE                 9.39             -24.52  \n",
       "Gentoo    Biscoe    FEMALE               8.17             -26.16  \n",
       "                    MALE                 8.27             -26.16  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clean_train.groupby(['Species','Island','Sex'])[['Culmen Length (mm)', \n",
    "                                                'Culmen Depth (mm)',\n",
    "                                                'Flipper Length (mm)', \n",
    "                                                'Body Mass (g)',\n",
    "                                                'Delta 15 N (o/oo)', \n",
    "                                                'Delta 13 C (o/oo)']].mean().round(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5dbd114e",
   "metadata": {},
   "source": [
    "This shows some important distinctions:\n",
    "- Adelie penguins are the only species that is present on all three islands. Chinstraps are only on Dream, Gentoo only on Biscoe. \n",
    "- Adelie penguins seem to have lower culmen lengths, on average. We will explore this further.\n",
    "- Gentoo penguins seem to have the lowest culmen depths, on average.\n",
    "- Gentoo penguins seem to have much higher flipper lengths and body masses, on average.\n",
    "- The Delta 15 N and Delta 13 C columns do not show very dramatic distinctions. Overall, Chinstrap has the highest average Delta 15 and 13 values, Gentoo the lowest. Because the means are very similar, these are probably not the best variables to use.\n",
    "- There are also differences among male and female penguins for every species.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "757e84fc",
   "metadata": {},
   "source": [
    "## Figure 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fc5bda37",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f991f14f3a0>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#important needed package for plotting\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "#creating the base plot\n",
    "fig, ax = plt.subplots(1)\n",
    "\n",
    "#labelling axes according to the columns we want to explore here\n",
    "ax.set(xlabel = \"Culmen Length (mm)\",\n",
    "       ylabel = \"Culmen Depth (mm)\")\n",
    "\n",
    "#creating an array with each unique species name from clean_train\n",
    "n_species = clean_train[\"Species\"].unique()\n",
    "\n",
    "#for each species in our array above\n",
    "for k in range(len(n_species)):\n",
    "    #getting that species' data from clean_train\n",
    "    species_data = clean_train[clean_train[\"Species\"] == n_species[k]]\n",
    "    \n",
    "    #plotting on scatterplot current species' datas culmen length on x-axis and culmen depth on y-axis\n",
    "    #giving it the appropriate label of the species' name\n",
    "    #transparent points through alpha=.5\n",
    "    ax.scatter(species_data[\"Culmen Length (mm)\"],\n",
    "        species_data[\"Culmen Depth (mm)\"],\n",
    "        label = n_species[k], alpha = .5)\n",
    "\n",
    "#making it look nicer\n",
    "plt.tight_layout()\n",
    "\n",
    "#adding a legend with the species' names to show which color is which\n",
    "ax.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed481dc0",
   "metadata": {},
   "source": [
    "This plot shows that Adelie penguins tend to have the lowest culmen lengths and the highest culmen depths, on average.Gentoo penguins tend to have the lowest culmen depths in our training dataset. Because we can see general differences between where each species lies, these are probably good variables to use to build our model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "107e7f8c",
   "metadata": {},
   "source": [
    "## Figure 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e6de7493",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f991d2feb50>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#creating the base plot\n",
    "fig, ax = plt.subplots(1)\n",
    "\n",
    "#labelling axes according to the columns we want to explore here\n",
    "ax.set(xlabel = \"Delta 15 N (o/oo)\",\n",
    "       ylabel = \"Delta 13 C (o/oo)\")\n",
    "\n",
    "#creating an array with each unique species name from clean_train\n",
    "n_species = clean_train[\"Species\"].unique() #do we need to do this again????\n",
    "\n",
    "#for each species in our array above\n",
    "for k in range(len(n_species)):\n",
    "    #getting that species' data from clean_train\n",
    "    species_data = clean_train[clean_train[\"Species\"] == n_species[k]]\n",
    "\n",
    "    #plotting on histogram current species' datas Delta 15 values on x-axis and Delta 13 on y-axis\n",
    "    #giving it the appropriate label of the species' name\n",
    "    #transparent graph through alpha=.5\n",
    "    ax.hist(species_data[\"Delta 15 N (o/oo)\"],\n",
    "    label = n_species[k], alpha = .5)\n",
    "\n",
    "#making it look nicer and adding a legend for the labels\n",
    "plt.tight_layout()\n",
    "ax.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f94e8fb0",
   "metadata": {},
   "source": [
    "We see a lot of overlap among the species and do not see many distinctions on the histogram. This reinforces our findings from Table 2, the delta columns are not strong variables to use for our predictor data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e05ba11e",
   "metadata": {},
   "source": [
    "## Figure 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bc5640f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1207.33x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#neccesay import for our graph below\n",
    "import seaborn as sns\n",
    "\n",
    "#graphing clean_train data with Flipper Length on the x-axis and Body Mass on the y-axis\n",
    "#colors correspond to species\n",
    "#using alpha to get transparent points\n",
    "fgrid = sns.relplot(data = clean_train,\n",
    "                    x = \"Flipper Length (mm)\",\n",
    "                    y = \"Body Mass (g)\",\n",
    "                    hue = \"Species\",\n",
    "                    alpha = .5, \n",
    "                    col = \"Island\", \n",
    "                    aspect = 1.3,\n",
    "                    height = 4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eff6984a",
   "metadata": {},
   "source": [
    "This is a faceted grid and we can see large differences among flipper lengths and body masses for the Gentoo and Adelie penguins, so this could be useful when picking our features."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a3619fd",
   "metadata": {},
   "source": [
    "## Figure 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e3d13cff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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LPfcc0/T60mTJrFixQqqqqo4/PDD+eEPf8jHP/7xLdaZPn06vXv3bnrdo0cPNm3atE3f27uXZVe5x6Xn4EiSlKnTTz+dd999l1tuuaVp2fr16wH4+Mc/zi233MLGjRsBePHFF3nnnXd22N++++7L2rVrATjxxBN58sknWbFiBZs3b2by5Ml89KMf3e7yzuYIjiRJneDgAQeW9MunneqvFRHBfffdx8SJE/nud7/LwIED2XvvvfmXf/kXLrjgApYuXcrIkSNJKTFw4EDuu+++HfY3fvx4PvnJT3LooYcybdo0brjhBk477TRSSpx55pl8+tOfBtju8s4UXWUoqbuoqqpKs2fPLncZkqQubtGiRRxzzDHlLiMrLe3TiJiTUqrauq1TVJIkKTsGHEmSlB0DjiRJyo4BR5IkZceAI0mSsmPAkSRJ2fE6OJIkdYKvT7ycNStfb7f++vU/hBtumtRqu9dff50JEyYwa9YsevfuzeDBgzn77LO5//77efDBB7dp//nPf56vfOUrDBs2bKfqqaur49VXX+XMM8/cqfU6igFHkqROsGbl61w95MV26+/GJa23SSlxzjnncMkll3DXXXcBhSDywAMPbHedn/70p7tUT11dHbNnz24x4GzatIk99+zcyOEUlSRJmZo2bRo9e/bksssua1pWWVnJRz7yEdatW8f555/P0UcfzcUXX9x0D6nq6moaL2i7zz778I1vfIPjjz+ek046ieXLlwPwy1/+kuHDh3P88cdz6qmn8v777/Otb32LKVOmUFlZyZQpU7j22msZP348Y8eO5bOf/SxLly7lIx/5CCNHjmTkyJH84Q9/AAr3vjr11FM555xzGDZsGJdddhkNDQ1t/uwGHEmSMrVgwQJOOOGEFt+bN28eN998MwsXLuTll19mxowZ27R55513OOmkk3juuec49dRT+clPfgLAddddx8MPP8xzzz3H/fffT69evbjuuusYN24cdXV1jBs3DoA5c+bw61//mjvvvJODDjqIRx99lLlz5zJlyhRqamqatjNz5ky+//3vM3/+fF566SV+9atftfmzO0UlKRu1tbUsWVLCuH0Hqq+vB6CioqKsdWxtyJAhW/wHRRo9enTTcVpZWcnSpUs55ZRTtmjTq1cvzjrrLABOOOEEHn30UQDGjBnD5z73Of7u7/6Oc889d7vb+NSnPkXfvn0B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\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#creating a large plot\n",
    "fig, ax = plt.subplots(figsize = (8, 6))\n",
    "\n",
    "#using seaborns to make a boxplot with data clean_train where Culmen Length is on the x-axis\n",
    "#and species is on the y-axis\n",
    "#box for each species and colors correspond to species too\n",
    "sns.boxplot(data = clean_train,\n",
    "            x = 'Culmen Length (mm)',\n",
    "            y = 'Species',\n",
    "            hue = 'Species',\n",
    "            width = .3,\n",
    "            dodge = False)\n",
    "\n",
    "#adding a legend for the species labels to the top right of the plot\n",
    "plt.legend(loc = \"upper right\", title = \"Species\")\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52f72bfe",
   "metadata": {},
   "source": [
    "This further explores a variable from Figure 1 and reinforces again what we saw in it: Adelie penguins have the lowest culmen lengths out of the three species. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93a87d65",
   "metadata": {},
   "source": [
    "# Feature Selection"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87ba83c3",
   "metadata": {},
   "source": [
    "In order to select columns that generate the highest scores on the test set, we use a systematic method in which we define a list of all possible combinations of columns and subsequently check which combination returns the best score. We use Logistic Regression for this task as it is well-suited for predicting probabilities and class labels."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a92e3e86",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import to use the LogisticRegression() method\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "def check_col_score(columns):\n",
    "    \"\"\"\n",
    "    a function that receives a set of columns of a data frame and returns a score indicating how well the\n",
    "    Logistic Regression model, trained by the training data, fits the testing data.\n",
    "    parameter columns : a list containing column names\n",
    "    \"\"\"\n",
    "    # set model using sklearn's LogisticRegression() method\n",
    "    LR = LogisticRegression(max_iter = 1000)\n",
    "    # fit the model with the training data, subsetted with the columns argument\n",
    "    LR.fit(X_train[columns], y_train)\n",
    "    # return a score indicating how well the testing data performs on that model\n",
    "    return LR.score(X_test[columns], y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2943eae6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best columns are ['Culmen Length (mm)', 'Culmen Depth (mm)', 'Delta 13 C (o/oo)'] with a testing score of 1.0\n"
     ]
    }
   ],
   "source": [
    "# represents a list form of X_train's columns\n",
    "    # pandas attribute .columns : returns the column labels of X_train\n",
    "    # pandas attribute .tolist() : converts those column labels into a list\n",
    "cols = X_train.columns.tolist()\n",
    "\n",
    "# initialize list to contain the lists of combinations of columns\n",
    "combos = []\n",
    "\n",
    "# create all possible combinations of columns; three nested for-loops, each representing one column of three in\n",
    "# a single combination\n",
    "for i in range(len(cols)):\n",
    "    for j in range(len(cols)):\n",
    "        for k in range(len(cols)):\n",
    "            # when the three indices are not the same (i.e. different columns), append to combos\n",
    "            if i != j and j != k and i != k:    # if i < j and j < k: ??? \n",
    "                combos.append([cols[i], cols[j], cols[k]])\n",
    "\n",
    "# initialize best score to lowest possible value to ensure initial replacement\n",
    "best_score = -np.inf\n",
    "\n",
    "# iterate through the list of combinations\n",
    "for combo in combos:\n",
    "    # get test socre of current combination using check_col_score()\n",
    "    test_score = check_col_score(combo)\n",
    "    \n",
    "    # check to see if the current test score is better than the current best score\n",
    "    if test_score > best_score:\n",
    "        # reassign best values\n",
    "        best_score = test_score\n",
    "        best_cols = combo\n",
    "\n",
    "# show result\n",
    "print(\"The best columns are \" + str(best_cols) + \" with a testing score of \" + str(best_score))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2bf0cd0a",
   "metadata": {},
   "source": [
    "Based on the results, we propose to use Culmen Length, Culmen Depth, and Sex as our features for all of our following models because this combination of features produces the highest score of 0.98 between all combinations of features."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6df5268a",
   "metadata": {},
   "source": [
    "# Modeling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8bd3755b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#setting X_train and X_test to include only the predictor variables we want to use,\n",
    "#as per our feature selection\n",
    "X_train = X_train[['Culmen Length (mm)', 'Culmen Depth (mm)', 'Sex']]\n",
    "X_test = X_test[['Culmen Length (mm)', 'Culmen Depth (mm)', 'Sex']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "38694ec6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import to use cross_val_score() method to perform cross validation\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "def get_best_parameters(X, y, model):\n",
    "    \"\"\"\n",
    "    a function that receives predictor data, target data, and the type of model and returns a tuple containing \n",
    "    the value that generated the highest cross validation score with the selected parameter and the cross\n",
    "    validation score returned when using that value.\n",
    "    parameter 1, X : predictor data\n",
    "    parameter 2, y : target data\n",
    "    model : a string representing the name of the model to perform cross validation on\n",
    "    \"\"\"\n",
    "    \n",
    "    #start with best_score as -np.inf, since we want a score that is as high as possible\n",
    "    #so we want best_score to be the greatest possible score\n",
    "    best_score = -np.inf\n",
    "    \n",
    "    if model == \"RandomForestClassifier\":\n",
    "        N = 30 #largest max depth\n",
    "\n",
    "        #creating an empty array that is as long as the number of possible depths to put our scores in\n",
    "        scores = np.zeros(N)\n",
    "\n",
    "        #for every possible depth from 1 to N\n",
    "        for d in range(1, N+1):\n",
    "\n",
    "            #use that depth for the model\n",
    "            RF = RandomForestClassifier(random_state = 42, max_depth = d)\n",
    "\n",
    "            #add the score when the model has that current depth to scores\n",
    "            #d-1 is used for indexing since we started with d=1, not d=0\n",
    "            scores[d-1] = cross_val_score(RF, X_train, y_train, cv = 5).mean()\n",
    "\n",
    "            #if this score is higher than the current best_score\n",
    "            if scores[d-1] > best_score:\n",
    "                #make the current depth the best_depth\n",
    "                best_depth = d\n",
    "                #make the current score the best_score\n",
    "                best_score = scores[d-1]\n",
    "\n",
    "        #printing our answers\n",
    "        print(\"The best depth is \" + str(best_depth) + \" and the best score is \" + str(best_score) + \". \")\n",
    "        return (best_depth, best_score)\n",
    "\n",
    "    # from this point, param must either be gamma or C (or else raise error)\n",
    "    \n",
    "    \n",
    "    #largest max gamma\n",
    "    g = 1 \n",
    "\n",
    "    # initialize scores to the number of iterations\n",
    "    scores = np.zeros(g*10)\n",
    "\n",
    "    #to use later to index scores, starting with first position in scores\n",
    "    index = 0\n",
    "    \n",
    "    if model == \"svm\":\n",
    "        #for every possible value from 1 to 10\n",
    "        #we will use d/10 as gamma, so gamma values ranging from 0.1 to 0.9\n",
    "        for d in range(1, g*10, 1): #do we need 1?\n",
    "\n",
    "            #create a model using the current gamma \n",
    "            SVM = svm.SVC(gamma = d/10)\n",
    "\n",
    "            #add the score using this model to our array\n",
    "            scores[index] = cross_val_score(SVM, X_train, y_train, cv = 5).mean()\n",
    "\n",
    "            #if this score is higher than the current best_score\n",
    "            if scores[index] > best_score:\n",
    "                #make the current gamma the best_gamma\n",
    "                best_gamma = d/10\n",
    "                #make the current score the best_score\n",
    "                best_score = scores[index]\n",
    "\n",
    "            #to help us index to the new position in scores for the next gamma value\n",
    "            index += 1\n",
    "\n",
    "        #print results\n",
    "        print(\"The best gamma is \" + str(best_gamma) + \" and the best score is \" + str(best_score) + \". \")\n",
    "        return (best_gamma, best_score)\n",
    "    elif model == \"LogisticRegression\":\n",
    "        #for every possible value from 1 to 10\n",
    "        #we will use d/10 as C, so C values ranging from 0.1 to 0.9\n",
    "        for d in range(1, g*10, 1): #do not need 1\n",
    "\n",
    "            #create a model using the current C \n",
    "            MLR = LogisticRegression(multi_class = \"multinomial\", solver = \"lbfgs\", max_iter = 1000, C = d/10)\n",
    "\n",
    "            #add the score using this model to our array\n",
    "            scores[index] = cross_val_score(MLR, X_train, y_train, cv = 5).mean()\n",
    "\n",
    "            #if this score is higher than the current best_score\n",
    "            if scores[index] > best_score:\n",
    "                #make the current C the best_C\n",
    "                best_C = d/10\n",
    "                #make the current score the best_score\n",
    "                best_score = scores[index]\n",
    "\n",
    "            #to help us index to the new position in scores for the next gamma value\n",
    "            index += 1\n",
    "\n",
    "        #print results\n",
    "        print(\"The best C is \" + str(best_C) + \" and the best score is \" + str(best_score) + \". \")\n",
    "        return (best_C, best_score)\n",
    "    else:\n",
    "        raise ValueError(\"\"\"\n",
    "                         Invalid parameter name. 'param' must be either 'max_depth' (RandomForestClassifier),\n",
    "                         or 'gamma' (svm), or 'C' (LogisticRegression)\n",
    "                         \"\"\")\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5e9f2ebe",
   "metadata": {},
   "outputs": [],
   "source": [
    "#creating a function to form a confusion matrix\n",
    "\n",
    "def conf_matrix(c, X, y):\n",
    "    \"\"\"\n",
    "    A function that displays a plot of a confusion matrix for a certain model fit on a dataset. \n",
    "    A confusion matrix is a 2D array that compares predicted category labels to actual labels. \n",
    "    This matrix using seaborns also has an additional row and column, referring to all the data.\n",
    "    A number is displayed in each box signifying the percent of predicted that matched the \n",
    "    actual for that specific combination.\n",
    "    \n",
    "    parameter 1, c: the model that is going to be fit to the dataset\n",
    "    parameter 2, X: the predictor data we are going to use to fit the model\n",
    "    parameter 3, y: the target data we are going to use to the fit the model???\n",
    "    \"\"\"\n",
    "    #fitting the model, generating predictions using our variables, and then getting the confusion\n",
    "    #matrix array\n",
    "    confusion_matrix = pd.crosstab(y, c.fit(X, y).predict(X[['Culmen Length (mm)', \n",
    "                                                             'Culmen Depth (mm)', \n",
    "                                                             'Sex']]), \n",
    "                                   rownames = ['Actual'], \n",
    "                                   colnames = ['Predicted'], \n",
    "                                   margins = True)\n",
    "    \n",
    "    #creating the confusion matrix plot using the array from above\n",
    "    sns.heatmap(confusion_matrix/np.sum(confusion_matrix), \n",
    "                annot=True, \n",
    "                fmt='.1%',\n",
    "                xticklabels=['Adelie','Chinstrap','Gentoo','All'],\n",
    "                yticklabels=['Adelie','Chinstrap','Gentoo','All'])\n",
    "    \n",
    "    #displaying the confusion matrix plot\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "28f2c7b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#creating a function to plot decision regions\n",
    "\n",
    "def plot_regions(c, X, y):\n",
    "    \"\"\"\n",
    "    A function that plots decision regions for a certain model and the data specified.\n",
    "    Decision regions are the parts of data space that the model assigns to each label.\n",
    "    \n",
    "    parameter 1, c: the model that is going to be fit to the dataset\n",
    "    parameter 2, X: the predictor data we are going to use to fit the model\n",
    "    parameter 3, y: the target data we are going to use to the fit the model???\n",
    "    \n",
    "    \"\"\"\n",
    "    \n",
    "    #fitting the model to the dataset\n",
    "    c.fit(X.to_numpy(), y)\n",
    "    \n",
    "    #our x-axis variable\n",
    "    x0 = X[\"Culmen Length (mm)\"]\n",
    "    #y-axis variable\n",
    "    x1 = X[\"Culmen Depth (mm)\"]\n",
    "    \n",
    "    #creating the variables that allow us to store the x and y axis variables as coordinate vectors\n",
    "    grid_x = np.linspace(x0.min(), x0.max(), 501)\n",
    "    grid_y = np.linspace(x1.min(), x1.max(), 501)\n",
    "\n",
    "    #using np.meshgrid to transform grid_x and grid_y from coordinate vectors to coordinate matrices\n",
    "    xx, yy = np.meshgrid(grid_x, grid_y)\n",
    "    \n",
    "    #using .ravel() to transform xx and yy into contiguous flattened arrays\n",
    "    XX = xx.ravel()\n",
    "    YY = yy.ravel()\n",
    "    \n",
    "    #creating dicts so each color corresponds to a certain species\n",
    "    color_dict = {0: \"blue\", 1: \"green\", 2: \"red\"}\n",
    "    species_dict = {0: \"Adelie\", 1: \"Chinstrap\", 2: \"Gentoo\"}\n",
    "    \n",
    "    X = X.values\n",
    "    \n",
    "    #creating two subplots, one for female and one for male\n",
    "    fig, ax = plt.subplots(1,2, sharey = True)\n",
    "    \n",
    "    #making a separate plot for each of the two sexes, which contains another for loop that plots each species'\n",
    "    #points on the correct plot according to Sex\n",
    "    for Sex in range(2):\n",
    "        #creates a list of the names of the sexes to be used later for labeling purposes\n",
    "        Sex_list = [\"Female\", \"Male\"]\n",
    "        \n",
    "        #creating an array of equal length to XX and YY to use Sex as a predictive variable\n",
    "        ZZ = Sex*(np.ones(len(XX)))\n",
    "        \n",
    "        #using the model to make predictions and reshaping the array to match the other arrays\n",
    "        p = c.predict(np.c_[XX, YY, ZZ]) \n",
    "        p = p.reshape(xx.shape)\n",
    "        \n",
    "        #graphs the predictions based on the model, which produces three regions on the plot of different colors\n",
    "        ax[Sex].contourf(xx, yy, p, cmap = \"jet\", alpha = .2)\n",
    "        \n",
    "        #extracting the data for the Sex being plotted during that iteration of the for loop\n",
    "        Xi = X[X[:,2] == Sex]\n",
    "        yi = y[X[:,2] == Sex]\n",
    "        \n",
    "        #looping through each species and plots the scatter points of that species\n",
    "        for Species in range(3):\n",
    "            ax[Sex].scatter(Xi[yi == Species][:,0],\n",
    "                            Xi[yi == Species][:,1],\n",
    "                            c = color_dict[Species],\n",
    "                            label = species_dict[Species])\n",
    "        \n",
    "        #adding the appropriate titles to each of the two plots and x axis label\n",
    "        ax[Sex].set(xlabel = \"Culmen Length (mm)\", title = Sex_list[Sex])\n",
    "    \n",
    "    #setting the axis labels and adding a legend\n",
    "    #only adding the y label to the plot on the left to reduce redundancy\n",
    "    #only adding the legend to the plot on the right to reduce redundancy\n",
    "    ax[0].set(xlabel = \"Culmen Length (mm)\", ylabel = \"Culmen Depth (mm)\", label = y)\n",
    "    ax[1].legend()\n",
    "\n",
    "    #making the plot look nicer\n",
    "    plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3f41480",
   "metadata": {},
   "source": [
    "# Model 1: Random Forests"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6071beea",
   "metadata": {},
   "source": [
    "Our first model is Random Forests. The Random Forest model works by taking a dataset and creating a large number of uncorrelated random decision trees to make a prediction. The model then aggregates the results from the trees to make more accurate predictions. Although we have already performed feature selection, the Random Forest model would generally include the feature selection process, making it suitable for datasets with a large number of predictive features. We expect to disregard overfitting and outlier effects as significant problems with the Random Forest model based on the model’s use of bagging. \n",
    "\n",
    "Our Random Forest will create trees that include Culmen Length, Culmen Depth, and Sex as predictive variables. We expect to disregard overfitting and outlier effects as significant problems with the Random Forest model based on the model’s use of bagging. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "881d8390",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best depth is 4 and the best score is 0.9866666666666667. \n"
     ]
    }
   ],
   "source": [
    "#getting the best_depth and score for our random forest model that is returned by our function\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "best_param, best_score = get_best_parameters(X_train, y_train, \"RandomForestClassifier\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e451e3b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#creating RF model using the best parameter value\n",
    "best_RF = RandomForestClassifier(random_state = 42, max_depth = best_param)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a722864c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9595959595959596"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# evaluating model with test data\n",
    "best_RF.fit(X_train, y_train).score(X_test[['Culmen Length (mm)', 'Culmen Depth (mm)', 'Sex']], y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "519322cf",
   "metadata": {},
   "source": [
    "Below is a visualization of the confusion matrix for `best_RF`, using seaborn. It compares the actual species to the predicted species. It incldues a 4th row and column that refers to all of the penguins in the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "2fe97588",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#producing the confusion matrix plot for our best random forests model\n",
    "conf_matrix(best_RF, X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "091cd5a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plotting the decision regions using our random forests model and the training data \n",
    "plot_regions(best_RF, X_train, y_train) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7c404e0",
   "metadata": {},
   "source": [
    "### Mistakes Made by the Random Forest Model\n",
    "The Random Forest model does not appear to make any mistakes based on the decision regions plot and the confusion matrix. This is likely because we are working with a relatively small data set and using a large number of estimators in the model (100). \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eeff7c17",
   "metadata": {},
   "source": [
    "# Model 2: Support Vector Machines"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90caa400",
   "metadata": {},
   "source": [
    "Our second model is Support Vector Machines. The Support Vector Machine model works by determining the best hyperplane to make predictions in the n-dimensional space, where n equals the number of predictive features. The model determines the best hyperplane both through how well it is able to separate the training data to produce the correct predictions and the maximum margin between the two closest data points across predictions. This maximized margin creates a buffer, where unseen data is less likely to be misclassified by the model should it fall slightly outside of the training data.\n",
    "\n",
    "Our Support Vector Machines Model will create two 2D planes, one for female and one for male, using the predictive variables of Culmen Length and Culmen Depth. Overfitting is a potential problem with the Support Vector Machines model, but its effects are mitigated by determining optimal values of gamma (how closely the hyperplane tries to match the training data)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "5b8b2019",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best gamma is 0.1 and the best score is 0.9777777777777779. \n"
     ]
    }
   ],
   "source": [
    "from sklearn import svm\n",
    "\n",
    "best_param, best_score = get_best_parameters(X_train, y_train, \"svm\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "54d5cdb1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#creating a new version of the SVM model that is refit using our best_gamma\n",
    "best_SVM = svm.SVC(gamma = best_param)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "61145599",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9494949494949495"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# evaluating model with test data\n",
    "best_SVM.fit(X_train, y_train).score(X_test[['Culmen Length (mm)', 'Culmen Depth (mm)', 'Sex']], y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "651f869a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#producing the confusion matrix plot for our best SVM model\n",
    "conf_matrix(best_SVM, X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ad104d56",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plotting the decision regions using our best SVM model and the training data \n",
    "plot_regions(best_SVM, X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "594e5714",
   "metadata": {},
   "source": [
    "### Mistakes Made by the Support Vector Machines Model\n",
    "While the Support Vector Machines model appears to generate reasonable decision regions, one of its shortcomings is that it noticeably overrepresents the decision regions for Gentoo penguins, as shown in both the male and female subplots. Since on average, the Gentoo penguins have shorter culmen depths than the other two species, we can assume that when plotted, a new, unseen penguin with a very large culmen length and culmen depth is better classified as a Chinstrap. According to the decision regions above, however, the Support Vector Machine will classify such a penguin as a Gentoo, which is likely false—especially with extraordinarily high culmen depth values.\n",
    "\n",
    "Moreover, a female Chinstrap was incorrectly predicted to be an Adelie and a male Gentoo was incorrectly predicted to be a Chinstrap, but these discrepancies could be explained by the fact that the boundaries between species groups were very close, and the Support Vector Machines model is generally better suited for datasets that are fairly sparsed."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8f47644",
   "metadata": {},
   "source": [
    "# Model 3: Multinomial Logistic Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8065635a",
   "metadata": {},
   "source": [
    "Our third and last model is multinomial logistic regression. Logistic regression is a model that is only limited to two-class classification problems. In these models, the target data is modeled by using a binomial probability distribution function. The model overall predicts the probability that an example belongs to class 1, where class labels are mapped to 1 for the positive class/outcome and 0 for the negative class/outcome.\n",
    "\n",
    "Multinomial logistic regression is similar to logistic regression but with modifications that allow it to support multi-class classification problems. One of these modifications is changing the loss function used to train the model to cross-entropy loss and a change to the output from a single probability value (like in logistic regression) to one probability for each class label."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "f50a75e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best C is 0.8 and the best score is 0.9866666666666667. \n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "best_param, best_score = get_best_parameters(X_train, y_train, \"LogisticRegression\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "71988b79",
   "metadata": {},
   "outputs": [],
   "source": [
    "#creating a new version of the MLR model that is refit using our best_gamma\n",
    "best_MLR = LogisticRegression(multi_class = \"multinomial\", solver = \"lbfgs\", max_iter = 1000, C = best_param)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "8ff3cf07",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9797979797979798"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_MLR.fit(X_train, y_train).score(X_test[['Culmen Length (mm)', 'Culmen Depth (mm)', 'Sex']], y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "a45f4391",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#producing the confusion matrix plot for our best MLR model\n",
    "conf_matrix(best_MLR, X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "494767b0",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plotting the decision regions using our best MLR model and the training data \n",
    "plot_regions(best_MLR, X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc7d1f4f",
   "metadata": {},
   "source": [
    "### Mistakes Made by the Multinomial Logistic Regression Model\n",
    "\n",
    "From our confusion matrix for this model, we can see that the model makes some errors. A few Chinstrap penguins were incorrectly predicted to be Adelie penguins, and a few Adelie penguins were incorrectly predicted to be Chinstrap penguins. Upon further analysis by looking at our decision regions for this model, we can see that the mistakes lie on the boundaries of the decision regions. A possible reason for the model making this mistake is that the model runs under the assumption that the data does not have outliers. When the model is used with real data, there are outliers that get misclassified."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e8ebb1d",
   "metadata": {},
   "source": [
    "### Discussion"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fd0d102",
   "metadata": {},
   "source": [
    "As a reminder, with our systematic feature selection, the best columns were shown to be `['Culmen Length (mm)', 'Culmen Depth (mm)', 'Sex']`, with a testing score of 0.9797979797979798.\n",
    "\n",
    "Below are their scores on the test data:\n",
    "- Random Forest :                   0.9595959595959596\n",
    "- Support Vector Machines :         0.9494949494949495\n",
    "- Multinomial Logistic Regression:  0.9797979797979798\n",
    "\n",
    "After analyzing our models and their performances, we would recommend using a random forests model fit with parameter max_depth = 4, and using features Culmen Length, Culmen Depth, and Sex. Through our feature selection method, and guided by our exploratory analysis, we chose to use these three variables since this was the combination that produced the highest testing score. Even though our RF and MLR model both had the same score, RF generated least errors, which is why we think that using RF and the previously specified features produces the best, most accurate model. Random Forests was likely the best model because we were able to use a high number of estimators for a relatively small data set, and this did not take too long to run because we had pre-selected our features. Moreover, the Random Forest model accounts for outliers the most of the three models through the data aggregation that occurs when the decision trees are grouped together. The MLR model assumes that there are no outliers in the data, while the SVM model tries to maximize the margin between data boundaries to account for outliers. Since our data is both close together in terms of data boundaries, and has outliers, it makes intuitive sense that Random Forest is the model best equipped to deal with these conditions.\n",
    "\n",
    "We do not recommend using the Support Vector Machines model because it had the lowest score and produced errors. The SVM model is a better fit for data sets that are small, but have a high number of features because of its ability to work with a large amount of features with minimal work from the user.\n",
    "\n",
    "Improvements: The Random Forest model with the specified parameters and features could be improved through the following recommendations:\n",
    "- Determine the best parameters for other parameters besides depth\n",
    "- Perform cross validations with more n-folds (increase cv in cross_val_score)\n",
    "- Increase the number of estimators from 100 to 1,000+\n",
    "- Add more different features into the data set - Random Forest is able to work with a large number of features, so it would improve the model to add more features that could potentially have higher predictive value than the combination of three that we selected during the Feature Selection process. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c9311751",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
